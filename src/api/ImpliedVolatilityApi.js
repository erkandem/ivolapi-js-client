/**
 * iVolAPI
 * implied volatility and price data for selected ETFs and futures. Contact: info at volsurf.com
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import ModelObject from '../model/ModelObject';
import SurfaceAggregate from '../model/SurfaceAggregate';
import VolaSummary from '../model/VolaSummary';

/**
* ImpliedVolatility service.
* @module api/ImpliedVolatilityApi
* @version 3.0.3
*/
export default class ImpliedVolatilityApi {

    /**
    * Constructs a new ImpliedVolatilityApi. 
    * @alias module:api/ImpliedVolatilityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAtmIvol operation.
     * @callback module:api/ImpliedVolatilityApi~getAtmIvolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ATM implied volatility data
     * At-the-money implied volatility time series.  - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: [&#x27;fut&#x27;, &#x27;eqt&#x27;, &#x27;ind&#x27;, &#x27;fx&#x27;] - **exchange**: one of: [&#x27;usetf&#x27;, &#x27;cme&#x27;, &#x27;ice&#x27;, &#x27;eurex&#x27;] - **tte**: time until expiry. 1m 3m 12m ... - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **order**:  sorting order with respect to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getAtmIvolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getAtmIvol(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'tte': opts['tte'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/atm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInterSpread operation.
     * @callback module:api/ImpliedVolatilityApi~getInterSpreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get ivol spread between options with different underlying
     * Calculate the difference between two ETFs or generally between two implied volatility series  - **symbol1**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust1**: underlying security type: &#x27;eqt&#x27; e.g. - **exchange1**: one of: &#x27;usetf&#x27;, e.g. - **symbol2**: example: &#x27;EWZ&#x27; or &#x27;ewz&#x27; (case insensitive) - **ust2**: underlying security type: &#x27;eqt&#x27; e.g. - **exchange2**: one of: &#x27;usetf&#x27;, e.g. - **tte**: time &#x27;til expiry. 1m 3m 12m ... - **delta**: the delta at which to calculate the spread - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **order**:  sorting order with respect to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getInterSpreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getInterSpread(symbol1, symbol2, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol1': symbol1,
        'symbol2': symbol2,
        'ust1': opts['ust1'],
        'ust2': opts['ust2'],
        'exchange1': opts['exchange1'],
        'exchange2': opts['exchange2'],
        'tte': opts['tte'],
        'delta': opts['delta'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/inter-spread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvol operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get implied volatility data for a single delta and single tte
     * implied volatility time series. Return a proxy for ATM by default Default: d050 which is identical to the /ivol/atm route   - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: [&#x27;fut&#x27;, &#x27;eqt&#x27;, &#x27;ind&#x27;, &#x27;fx&#x27;] - **exchange**: one of: [&#x27;usetf&#x27;, &#x27;cme&#x27;, &#x27;ice&#x27;, &#x27;eurex&#x27;] - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **tte**: time until expiry. 1m 3m 12m ... - **delta**: e.g. d050 (default) - **order**:  sorting order with respect  to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getIvolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getIvol(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'tte': opts['tte'],
        'delta': opts['delta'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolCalendar operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolCalendarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the spread between different expiries
     * A calendar spread is the difference of implied volatility between two different expiry dates and optionally different deltas.   - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; e.g., case insensitive - **ust**: underlying security type: &#x27;eqt&#x27; e.g. - **exchange**: one of: &#x27;usetf&#x27; e.g. - **tte**: time until expiry: &#x27;1m&#x27;, &#x27;2m&#x27;, &#x27;3m&#x27; e.g. - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **tt1**: time &#x27;til expiry of first leg - **tt2**: time &#x27;til expiry of second leg - **delta1**: manually set the first delta leg - **delta2**: manually set the second delta leg - **order**:  sorting order with respect to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getIvolCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getIvolCalendar(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'tte1': opts['tte1'],
        'tte2': opts['tte2'],
        'delta1': opts['delta1'],
        'delta2': opts['delta2'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/calendar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSmile operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSmileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * smile
     * &#x60;smile&#x60; is defined as the implied volatility curve of one expiry at one date. The curve being the implied volatility from out-of-the-money puts to out-of-the-money calls.  - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: [&#x27;fut&#x27;, &#x27;eqt&#x27;, &#x27;ind&#x27;, &#x27;fx&#x27;] - **exchange**: one of: [&#x27;usetf&#x27;, &#x27;cme&#x27;, &#x27;ice&#x27;, &#x27;eurex&#x27;] - **tte**: time until expiry. 1m 3m 12m ... - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **order**:  sorting order with respect to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getIvolSmileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getIvolSmile(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'tte': opts['tte'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/smile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSummaryCme operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSummaryCmeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get min, max, std, average and weekly data points for symbols on CME
     * Returns descriptive statistics and some slices of data for for selected symbols traded at CME
     * @param {module:api/ImpliedVolatilityApi~getIvolSummaryCmeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getIvolSummaryCme(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/summary/cme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSummaryEurex operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSummaryEurexCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VolaSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get min, max, std, average and weekly data points for symbols on EUREX
     * Returns descriptive statistics and some slices of data for selected symbols traded at EUREX
     * @param {module:api/ImpliedVolatilityApi~getIvolSummaryEurexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VolaSummary>}
     */
    getIvolSummaryEurex(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolaSummary];

      return this.apiClient.callApi(
        '/ivol/summary/eurex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSummaryIce operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSummaryIceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VolaSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get min, max, std, average and weekly data points for sybmols on ICE
     * Returns descriptive statistics and some slices of data for symbols traded at ICE
     * @param {module:api/ImpliedVolatilityApi~getIvolSummaryIceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VolaSummary>}
     */
    getIvolSummaryIce(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolaSummary];

      return this.apiClient.callApi(
        '/ivol/summary/ice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSummarySingle operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSummarySingleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VolaSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get min, max, std, average and weekly data points
     * Returns descriptive statistics and some slices of implied volatility data last, 1 week, 2 week, 3 week, 4 week, 5 week and 6 week ago  - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: &#x27;eqt&#x27; e.g. - **exchange**: one of: &#x27;usetf&#x27;, e.g. - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **tte**: time &#x27;til expiry: 1m 3m 12m ... - **delta**: a single delta. d050 by default.
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getIvolSummarySingleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VolaSummary}
     */
    getIvolSummarySingle(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'tte': opts['tte'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'delta': opts['delta']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VolaSummary;

      return this.apiClient.callApi(
        '/ivol/summary/single', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getIvolSummaryUsetf operation.
     * @callback module:api/ImpliedVolatilityApi~getIvolSummaryUsetfCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VolaSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get min, max, std, average and weekly data points for US ETFs
     * Returns descriptive statistics and some slices of data for selected US ETFs
     * @param {module:api/ImpliedVolatilityApi~getIvolSummaryUsetfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VolaSummary>}
     */
    getIvolSummaryUsetf(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VolaSummary];

      return this.apiClient.callApi(
        '/ivol/summary/usetf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRiskReversal operation.
     * @callback module:api/ImpliedVolatilityApi~getRiskReversalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the risk reversal of fitted implied volatility data
     * Get the risk reversal of fitted implied volatility data for &#x60;symbol&#x60;.  Essentially the risk reversal is a measure of the volatility skew. supplied only &#x60;offset&#x60; will be parsed. Minimally supply &#x60;symbol&#x60;. The backend will try to resolve the dependent query parameters such as security type &#x60;ust&#x60; and &#x60;exchange&#x60; or set defaults.  Calculation:  &gt;rr &#x3D; σ(delta1) - σ(delta2)  Example:  &gt;delta1 &#x3D; 60 (otm put with 40 delta)  &gt;delta2 &#x3D; 40 (otm call with 40 delta)  &gt;rr &#x3D; σ(|Δ_put| &#x3D; 40) - σ(|Δ_call| &#x3D; 40)  For an average equities rr will be positive on average.  - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: [&#x27;fut&#x27;, &#x27;eqt&#x27;, &#x27;ind&#x27;, &#x27;fx&#x27;] - **exchange**: one of: [&#x27;usetf&#x27;, &#x27;cme&#x27;, &#x27;ice&#x27;, &#x27;eurex&#x27;] - **tte**: time until expiry. 1m 3m 12m ... - **startdate**: format: yyyy-mm-dd - **enddate**: format: yyyy-mm-dd - **dminus**: indicate the number of days back from &#x60;enddate&#x60; - **delta1**: manually set the first delta leg - **delta2**: manually set the second delta leg - **order**:  sorting order with respect to date
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getRiskReversalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getRiskReversal(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'ust': opts['ust'],
        'exchange': opts['exchange'],
        'tte': opts['tte'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'dminus': opts['dminus'],
        'delta1': opts['delta1'],
        'delta2': opts['delta2'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/ivol/risk-reversal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSurfaceByDelta operation.
     * @callback module:api/ImpliedVolatilityApi~getSurfaceByDeltaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SurfaceAggregate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a surface parameterized by delta and constant time
     * - **symbol**: example: &#x27;SPY&#x27; or &#x27;spy&#x27; (case insensitive) - **ust**: underlying security type: [&#x27;fut&#x27;, &#x27;eqt&#x27;, &#x27;ind&#x27;, &#x27;fx&#x27;] - **exchange**: one of: [&#x27;usetf&#x27;, &#x27;cme&#x27;, &#x27;ice&#x27;, &#x27;eurex&#x27;] - **date**&#x27; date of implied volatility surface to be returned
     * @param {Object} opts Optional parameters
     * @param {module:api/ImpliedVolatilityApi~getSurfaceByDeltaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SurfaceAggregate>}
     */
    getSurfaceByDelta(symbol, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': symbol,
        'date': opts['_date'],
        'exchange': opts['exchange'],
        'ust': opts['ust']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SurfaceAggregate];

      return this.apiClient.callApi(
        '/ivol/surface', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
