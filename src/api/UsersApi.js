/**
 * iVolAPI
 * implied volatility and price data for selected ETFs and futures. Contact: info at volsurf.com
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import ModelObject from '../model/ModelObject';
import RegisterPy from '../model/RegisterPy';
import UpdatePassword from '../model/UpdatePassword';

/**
* Users service.
* @module api/UsersApi
* @version 3.0.3
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteApiUser operation.
     * @callback module:api/UsersApi~deleteApiUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Api User
     * @param {module:api/UsersApi~deleteApiUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    deleteApiUser(username, callback) {
      let postBody = null;

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUserRole operation.
     * @callback module:api/UsersApi~deleteUserRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Role
     * @param {module:api/UsersApi~deleteUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    deleteUserRole(username, role, callback) {
      let postBody = null;

      let pathParams = {
        'username': username,
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users/{username}/roles/{role}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiUsers operation.
     * @callback module:api/UsersApi~getApiUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Users
     * @param {module:api/UsersApi~getApiUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserRoles operation.
     * @callback module:api/UsersApi~getUserRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Roles
     * @param {module:api/UsersApi~getUserRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getUserRoles(username, callback) {
      let postBody = null;

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users/{username}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postAddNewApiUser operation.
     * @callback module:api/UsersApi~postAddNewApiUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Add New Api User
     * @param {module:api/UsersApi~postAddNewApiUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    postAddNewApiUser(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putAddUserRole operation.
     * @callback module:api/UsersApi~putAddUserRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put Add User Role
     * @param {module:api/UsersApi~putAddUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    putAddUserRole(username, role, callback) {
      let postBody = null;

      let pathParams = {
        'username': username,
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users/{username}/roles/{role}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putChangeUserPw operation.
     * @callback module:api/UsersApi~putChangeUserPwCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put Change User Pw
     * @param {module:api/UsersApi~putChangeUserPwCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    putChangeUserPw(body, username, callback) {
      let postBody = body;

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/users/{username}/pw', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
