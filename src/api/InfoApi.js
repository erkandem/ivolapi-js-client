/**
 * iVolAPI
 * implied volatility and price data for selected ETFs and futures. Contact: info at volsurf.com
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Data from '../model/Data';
import HTTPValidationError from '../model/HTTPValidationError';
import ModelObject from '../model/ModelObject';

/**
* Info service.
* @module api/InfoApi
* @version 3.0.3
*/
export default class InfoApi {

    /**
    * Constructs a new InfoApi. 
    * @alias module:api/InfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getApiInfoExchanges operation.
     * @callback module:api/InfoApi~getApiInfoExchangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info Exchanges
     * return available &#x60;&#x60;exchange&#x60;&#x60; for a given &#x60;&#x60;ust&#x60;&#x60;
     * @param {module:api/InfoApi~getApiInfoExchangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoExchanges(ust, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ust': ust
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/exchanges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiInfoFirstAndLast operation.
     * @callback module:api/InfoApi~getApiInfoFirstAndLastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info First And Last
     * @param {Object} opts Optional parameters
     * @param {module:api/InfoApi~getApiInfoFirstAndLastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoFirstAndLast(ust, exchange, symbol, ltd, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ust': ust,
        'exchange': exchange,
        'symbol': symbol,
        'ltd': ltd,
        'option_month': opts['optionMonth'],
        'underlying_month': opts['underlyingMonth']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/first-and-last', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiInfoLtd operation.
     * @callback module:api/InfoApi~getApiInfoLtdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info Ltd
     * return &#x60;&#x60;ltd&#x60;&#x60; given &#x60;&#x60;ust&#x60;&#x60;, &#x60;&#x60;exchange&#x60;&#x60;, &#x60;&#x60;symbol&#x60;&#x60;
     * @param {module:api/InfoApi~getApiInfoLtdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoLtd(ust, exchange, symbol, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ust': ust,
        'exchange': exchange,
        'symbol': symbol
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/last-trading-days', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiInfoOptionMonthAndUnderlyingMonth operation.
     * @callback module:api/InfoApi~getApiInfoOptionMonthAndUnderlyingMonthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info Option Month And Underlying Month
     * @param {module:api/InfoApi~getApiInfoOptionMonthAndUnderlyingMonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoOptionMonthAndUnderlyingMonth(ust, exchange, symbol, ltd, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ust': ust,
        'exchange': exchange,
        'symbol': symbol,
        'ltd': ltd
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/option-month-and-underlying-month', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiInfoSymbols operation.
     * @callback module:api/InfoApi~getApiInfoSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info Symbols
     * return symbols according to &#x60;&#x60;ust&#x60;&#x60; and/or &#x60;&#x60;exchange&#x60;&#x60;
     * @param {module:api/InfoApi~getApiInfoSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoSymbols(ust, exchange, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ust': ust,
        'exchange': exchange
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getApiInfoUsts operation.
     * @callback module:api/InfoApi~getApiInfoUstsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Info Usts
     * return available &#x60;&#x60;ust&#x60;&#x60;
     * @param {module:api/InfoApi~getApiInfoUstsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    getApiInfoUsts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/usts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postApiInfoStrikes operation.
     * @callback module:api/InfoApi~postApiInfoStrikesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Api Info Strikes
     * same as &#x60;GET&#x60; route, but containing the query within the body
     * @param {module:api/InfoApi~postApiInfoStrikesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelObject}
     */
    postApiInfoStrikes(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/info/strikes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
