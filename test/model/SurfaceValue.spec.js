/**
 * iVolAPI
 * implied volatility and price data for selected ETFs and futures. Contact: info at volsurf.com
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IVolApi);
  }
}(this, function(expect, IVolApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IVolApi.SurfaceValue();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SurfaceValue', function() {
    it('should create an instance of SurfaceValue', function() {
      // uncomment below and update the code to test SurfaceValue
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be.a(IVolApi.SurfaceValue);
    });

    it('should have the property var1 (base name: "var1")', function() {
      // uncomment below and update the code to test the property var1
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var2 (base name: "var2")', function() {
      // uncomment below and update the code to test the property var2
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var3 (base name: "var3")', function() {
      // uncomment below and update the code to test the property var3
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var4 (base name: "var4")', function() {
      // uncomment below and update the code to test the property var4
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var5 (base name: "var5")', function() {
      // uncomment below and update the code to test the property var5
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var6 (base name: "var6")', function() {
      // uncomment below and update the code to test the property var6
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var8 (base name: "var8")', function() {
      // uncomment below and update the code to test the property var8
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var9 (base name: "var9")', function() {
      // uncomment below and update the code to test the property var9
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var10 (base name: "var10")', function() {
      // uncomment below and update the code to test the property var10
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var11 (base name: "var11")', function() {
      // uncomment below and update the code to test the property var11
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var12 (base name: "var12")', function() {
      // uncomment below and update the code to test the property var12
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var13 (base name: "var13")', function() {
      // uncomment below and update the code to test the property var13
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var14 (base name: "var14")', function() {
      // uncomment below and update the code to test the property var14
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var15 (base name: "var15")', function() {
      // uncomment below and update the code to test the property var15
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

    it('should have the property var16 (base name: "var16")', function() {
      // uncomment below and update the code to test the property var16
      //var instane = new IVolApi.SurfaceValue();
      //expect(instance).to.be();
    });

  });

}));
